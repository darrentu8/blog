<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh_TW"><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://darrentu8.github.io//blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://darrentu8.github.io//blog/" rel="alternate" type="text/html" hreflang="zh_TW" /><updated>2021-07-09T23:15:11+08:00</updated><id>https://darrentu8.github.io//blog/feed.xml</id><title type="html">Darren</title><subtitle>A blog, portfolio, and resume.
</subtitle><author><name>Darren Tu</name><email>darrentu8@gmail.com</email></author><entry><title type="html">web工程師應該要知道瀏覽器架構演變及渲染機制</title><link href="https://darrentu8.github.io//blog/blog/2018-10-10-blog-browser/" rel="alternate" type="text/html" title="web工程師應該要知道瀏覽器架構演變及渲染機制" /><published>2018-10-10T00:00:00+08:00</published><updated>2021-07-09T22:59:41+08:00</updated><id>https://darrentu8.github.io//blog/blog/blog-browser</id><content type="html" xml:base="https://darrentu8.github.io//blog/blog/2018-10-10-blog-browser/">&lt;blockquote&gt;
  &lt;p&gt;「在未來，瀏覽器會變得越來越強，以後我們可以在瀏覽器做越來越多事。」&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;身為常與瀏覽器共舞的 Web 工程師，尤其是 Frontend Engineer，如果瀏覽器突然消失了，應該也等同於要失去飯碗了 😂 而上面這句話我想大家應該或多或少都有聽過，不過你知道所謂變得越來越強是指什麼嗎？瀏覽器又是為什麼會變得更強呢？透過這篇文章，我想淺淺得說明瀏覽器的架構演進史，從過去，到現在，再看向未來。身為 Web 工程師，瀏覽器的關係與我們密不可分，但除了學會使用它以外，如果能去理解背後的運作模式，我認為是百利而無一害的，除了學會根據背後運作模式去建構更好的 web 應用以外，也可以提早洞察到未來可能的發展，領先其他人一步去探索更多可能性。&lt;br /&gt;
這篇文章會透過簡易系統架構的角度去看瀏覽器的演進，process 程序（對岸用語為進程），thread 執行緒（對岸用語為線程）是兩個必備的知識點，如果還不太了解兩者概念的讀者可以參考我之前的文章。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;舊石器時代single-process-瀏覽器時期&quot;&gt;舊石器時代：Single Process 瀏覽器時期&lt;/h2&gt;
&lt;p&gt;首先這邊假設各位讀者都已經了解 Process 與 Thread 的基本概念。&lt;br /&gt;
其實在 2007 年以前，市面上的瀏覽器基本上都是 Single Process 單一程序的架構的。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/3160/1*aCbpvQk_djR_W8sxzF8ODw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這代表著瀏覽器的所有功能模組都是運行在同一個 Process 裡的，所謂的功能模組指的是 JavaScript 執行環境、網路、瀏覽器擴充功能（插件）、渲染引擎…等，由上面的架構圖也可以看出不同的功能模組可能運行在不同的 thread 中，然而這種架構衍伸出了幾個明顯的問題：&lt;br /&gt;
不穩定性&lt;br /&gt;
不流暢性&lt;br /&gt;
安全性問題&lt;br /&gt;
不穩定性&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;簡單來說就是，單一程序的瀏覽器中，其中一個功能模組如果出問題壞掉了，會導致整個瀏覽器的崩潰。早期的瀏覽器有很多功能並沒有原生支援，例如影片播放、遊戲引擎…等，需要透過插件 (Plugin) 來協助實現，但偏偏 Plugin 又很容易出問題，當插件運行崩壞時，也會導致瀏覽器的崩壞。JavaScript 執行環境也是一樣的道理，如果程式碼過於複雜或是效能炸裂，也會導致渲染引擎的崩壞，進而導致整個瀏覽器的崩壞。&lt;br /&gt;
不流暢性&lt;br /&gt;
從上面的 Single Process Browser 架構圖可以看到，有一個叫 Page Thread 的執行緒，它的工作包山包海，從頁面的渲染、頁面的顯示、JavaScript 的執行環境還有插件的運行都是它的職責。不過由於是單一執行緒，意味著同一時刻只有一個功能可以執行，所以如果遇到一段跑很慢或是無限循環的 JS 程式碼，例如：&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function stupidFunc() {
  while(true) {
   console.log('HI');
  }
};
stupidFunc();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在 Single Process 的瀏覽器架構裡，上面這段無限循環的程式碼會獨佔整個 thread 的資源，導致其他模組永遠沒有機會被執行到，因為瀏覽器所有的頁面都是靠這個執行緒運行的，所以這樣的狀況會讓整個瀏覽器失去反應或是變得卡頓。&lt;br /&gt;
另外相信大家也知道，記憶體的空間也是影響瀏覽器效能的重大因素，而 Single Process 架構的瀏覽器有一個明顯的缺點就是往往不能完全地回收記憶體，導致使用時間越久記憶體佔用就越來越高，導致頁面慢慢變得不流暢與卡頓。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;安全性問題&quot;&gt;安全性問題&lt;/h2&gt;
&lt;p&gt;因為我本身對資安並不是那麼的了解，所以這邊只能簡單說明可能發生的狀況。&lt;br /&gt;
以往 Single Process 架構的瀏覽器沒有實作合理的安全環境（例如等等會提到的 sandbox），因此透過 Plugins 或是 Script 是有可能可以獲取系統資源與權限的，而這個狀況不需多說，自然會衍伸出許多安全性的問題，注入病毒、盜竊帳號密碼都是可能發生的資安攻擊。&lt;br /&gt;
以上就是三個 Single Process Browser 最大的缺陷，如果隨便一個頁面壞掉會使整個瀏覽器崩潰的話，確實蠻恐怖的，萬一其中一個頁面是你花了一個星期撰寫，要給老闆看的企業報告，你應該也會崩潰吧 😂 所幸現在的我們已經不需要受到這種瀏覽器架構的荼毒與威脅，讓我們接著看看下個階段瀏覽器的架構做出了什麼樣的改變吧！&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;新石器時代multi-processes-瀏覽器時期&quot;&gt;新石器時代：Multi Processes 瀏覽器時期&lt;/h2&gt;
&lt;p&gt;接下來的架構我都會以 Chrome 這個瀏覽器的架構來說明，並不是單純因為它是我最喜歡的瀏覽器（雖然是事實沒錯 😂），更是因為它是第一個提出 Multi Processes 多程序架構的瀏覽器。Chrome 在 2008 年發表了 Multi Processes 的架構，當時的瀏覽器架構圖大致上如下:&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/700/1*3Tx4AkFEIG700D4--KBBpQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這個版本的架構與上一個 Single Process 的架構差別在於獨立出了 Renderer Process 與 Plugins Process，也就是渲染程序與插件程序，不同 Processes 間需要通過 IPC 來溝通（也就是上圖的虛線），Plugins Process 顧名思義就是專門運行瀏覽器插件、外掛的程序，Renderer Process 又被稱作渲染引擎，主要負責頁面的渲染，包含 Parse、Render、JS 的執行等工作，關於現今瀏覽器渲染引擎的運作機制，稍後會有更加詳細的介紹。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;接著來看看改成這樣的架構後是否有效地解決了-single-process-瀏覽器的三大問題&quot;&gt;接著來看看改成這樣的架構後，是否有效地解決了 Single Process 瀏覽器的三大問題：&lt;br /&gt;&lt;/h3&gt;

&lt;p&gt;-&lt;strong&gt;不穩定性的問題：&lt;/strong&gt; 因為各個 Process 是互相隔離的，也就是說如果 Plugin 崩壞，或是頁面失去響應了，只會影響到它們當前所運行的 Process，並不會像以前一樣牽一髮而動全身，導致整個瀏覽器的癱瘓，因此有效解決了不穩定性的問題。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;-&lt;strong&gt;不流暢性的問題：&lt;/strong&gt; 這個架構下拆分出 Renderer Process 的特點是，瀏覽器中每一個 Tab 都會運行在獨立的 Renderer Process 上。雖然遇到上面無限循環的 Script，ㄧ樣會造成頁面失去反應，不過現在會影響的就只有當前的頁面（Tab）而已，其他的頁面因為是運行在不同的 Process，因此仍能正常運作。再來是前面提到記憶體有可能無法完全回收或發生 memory leak 的問題，儘管現在頁面失去反應了，當你關閉它時，整個 Renderer Process 也會被關閉，這個 Process 所佔用的記憶體會被系統完整的收回，解決了過往 memory leak 的問題。因此這樣看下來，不流暢性的問題也得到了大大的改善。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;-&lt;strong&gt;不安全性的問題：&lt;/strong&gt; 在 Multi Processes 架構下的瀏覽器，不僅獨立出了不同的程序，還引用了 「Sandbox 沙盒」的機制，使 Plugin Process 與 Renderer Process 運行在沙盒中。（可以把 Sandbox 想像成一個安全的隔離環境，在裡面運行的程式無法獲取外部的數據，放到瀏覽器中，就是指無法獲得系統的資源，想當然，連讀取都禁止了，寫入當然也是禁止的），即使有惡意的程式碼，也只會運行在 Sandbox 中，無法突破 Sandbox 影響外部瀏覽器的系統，這也就解決了之前提到可能會發生的一些資安問題。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;現代更加豐富的-multi-processes-瀏覽器架構&quot;&gt;現代：更加豐富的 Multi Processes 瀏覽器架構&lt;/h2&gt;

&lt;p&gt;（可能有讀者會疑惑，怎麼從新石器時代馬上就跳到現代來了 😂，這點就放過我不要計較了吧 🤣）&lt;br /&gt;
大家都知道 Chrome 是 Google 開發的，進化的速度也是非常快的，現在的 Chrome 瀏覽器仍然以多程序架構為基礎，不過獨立出了更多的 Processes，大致上如以下的架構圖：&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/700/1*bmUbnAhxH9C7raz-bwEOxw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從上圖可以看出，原本運行於 Browser Process 中的網路資源操作與 GPU 操作變成 Network Process（主要負責網路資源載入） 與 GPU Process（負責一些頁面的繪製與運算） 被獨立了出來，而獨立出 Process 的好處也在稍早提過了，除了解決不穩定性、不安全性與不流暢性以外，也可以擁抱 process parallel 運行帶來的性能提升。&lt;br /&gt;
那麼方便的話，我把所有操作都獨立出一個 Process 不就好了？&lt;br /&gt;
這個思考方向並沒有錯，不過想擁有收穫總是得付出一些成本或代價，獨立出更多 Processes 的缺點主要有：&lt;br /&gt;
更高的記憶體佔用&lt;br /&gt;
系統架構會變得更加複雜（要考慮不同 process 間的溝通）&lt;br /&gt;
因此這其實是個非常複雜的問題，也是 Chrome 團隊一直在優化的方向。&lt;br /&gt;
未來世界：SOA 服務導向架構瀏覽器&lt;br /&gt;
面對上述高記憶體佔用與架構複雜的問題，Chrome 團隊非常努力想找到一個彈性的解決方案，在 2016 年 chrome 提出了以 SOA (Services Oriented Architecture) 服務導向架構為基礎的新架構：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*r05OaXt93q9ZcWo2mV1dmw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也就是希望各個在 browser 中運行的 program 可以以服務 (service) 的角度被拆分或聚合，並運行在獨立的 Process 中，Processes 間透過 IPC 來溝通，讓系統架構實現高內聚、低耦合、易擴展與易維護的特性。&lt;br /&gt;
而關於 SOA，相信很多讀者會聯想到 Microservices，如果想了解兩者區別的讀者可以參考這篇文章。&lt;br /&gt;
另外 Chrome 還提供一個我認為非常厲害又彈性的架構，我們都知道設備的性能差異是很大的，如果在低階的設備上，例如老舊的手機，這樣的瀏覽器架構似乎不是低階設備承受得起的。在遇到性能較高的設備時，Chrome 會採用上面所說拆成多個 Processes 的架構去增強穩定性與效能，但是如果是在較低階老舊的設備上運行時，Chrome 則會自動採用多個服務合併成單一 Process 的方式來節省記憶體耗費，來達到更彈性的架構。&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;General idea is that when Chrome is running on powerful hardware, it may split each service into different processes giving more stability, but if it is on a resource-constraint device, Chrome consolidates services into one process saving memory footprint. — developer.google.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其實 Chrome 現在就已經在朝著這個方向前進了，只不過這必定是一個緩慢的過程，因此我將它放在「未來」這個時間線裡。不過值得一提的是，Chrome 的更新是漸進式的，也就是說未來服務會慢慢的改進與更新，我們將會慢慢享受到更多更新的服務，未來不管是 AR/VR、遊戲引擎，甚至是 AI，都可以在瀏覽器身上看到無限可能，身為 Web 開發者，我想這是一件會讓我們都感到期待與熱血沸騰的一件事。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;現今瀏覽器渲染引擎的運作機制&quot;&gt;現今瀏覽器渲染引擎的運作機制&lt;/h2&gt;

&lt;p&gt;原本這篇文章應該在上面簡單介紹完瀏覽器架構演進後就該告一段落了，不過剛好在這篇文章中一直提到了 Renderer Process，它也就是你常常會聽到的「渲染引擎」，身為 Web 工程師，又甚至像我一樣是更偏向前端開發的工程師，渲染引擎想必是你最常聽到，也最在乎的一個程序，因為它負責處理頁面的渲染流程，負責將 HTML、CSS、JavaScript 三劍客變成我們看到的頁面，然而這中間發生的過程你是否都了解了呢？如果你還不是很了解也沒關係，我想藉著文章的最後一個段落（雖然應該會是最長的一個段落），簡單複習一下渲染引擎的運作機制，讓各位開發者們可以更了解網頁究竟是怎麼被顯示出來的。&lt;br /&gt;
（底下ㄧ樣會以 Chrome 瀏覽器作為示範）&lt;br /&gt;
每個 Tab 都會產生一個獨立的 Renderer Process&lt;br /&gt;
這點在看完上面的架構演進史後，讀者應該都能了解了，這也就是為什麼其中一個 Tab 的網頁掛掉之後，你仍然可以繼續正常使用其他 Tab 的網頁，因為不同的 Renderer Process 是不會互相影響的。讀者可以點擊 Chrome 瀏覽器的右上角，點擊「更多工具」-&amp;gt;「工作管理員」&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;會出現類似作業系統工作管理員的介面&quot;&gt;會出現類似作業系統工作管理員的介面&lt;/h3&gt;

&lt;p&gt;在了解瀏覽器架構演進史後，看到瀏覽器運行著這麼多 Process 應該就不會被嚇到了，除了 Browser Process 以外， GPU Process、Network Process 等不同程序都可以在工作管理員看到，再來就是各個不同的 Tab 也會運行在獨立的 Renderer Process 裡。&lt;br /&gt;
Per-frame Renderer Processes — Site Isolation&lt;br /&gt;
這是 Chrome 在 2018 年左右引進的新特色，Same Origin Policy 同源政策是 web 裡一個很普遍的安全模型，理論上不同源的網站在未經授權下是要不能存取到彼此的資源的，不然會產生許多安全性問題。而要做到把兩個不同來源的網站徹底分開，獨立 Process 成為最有效率也最根本的一個方式，因此在 Chrome 中，實現了每個 Tab 都獨立一個程序的機制，甚至在網頁中嵌入不同來源的 iframe，該 iframe 也會運行在不同的 Renderer Process 上：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*vfFQIhgox9px6rPUoj8_fA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;不過讀者要知道採用這種方式不僅僅是獨立出不同 Renderer Processes 這麼單純而已，它也徹底改變了 iframe 與網頁間的溝通方式，對於 Chrome 團隊來說絕對是一個很大的里程碑。
不過眼尖的讀者可能會發現，有些頁面顯示為「子頁框」，並且沒有獨立的 Process ID，這是為什麼呢？&lt;br /&gt;
Process Per Site Instance&lt;br /&gt;
雖然預設狀況下，每個 Tab 都會是獨立一個 Renderer Process，不過在某些「Same Site」的狀況下，Chrome 預設會將同源的網頁運行在同一個 Process 中。這裡的 Same Site 指的是 Protocol ㄧ樣、root domain 一樣就符合了（跟一般 Same Site Cookie 或同源政策的標準都不太一樣，讀者別搞混囉，請把它們當作完全不同的觀念！），也就是說&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://kylemo.com
https://www.kylemo.com
https://www.kylemo.com:3000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;都會被視為 Same Site，另外還有一個條件是「必須從一個頁面打開另一個 Same Site 頁面」 ，例如透過 &lt;a&gt; tag 或是 window.open 等方法，瀏覽器就會將新開啟的 Same Site 頁面與原本的頁面運行在同一個 Process 中。其實仔細想想這樣的特性是合理的，畢竟有些 Same Site 的網頁，是有共享 JavaScript 執行環境的需求的，另外節省記憶體也是這個特性的優勢之一。&lt;br /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;渲染流程&quot;&gt;渲染流程&lt;/h2&gt;
&lt;p&gt;Renderer Process 主要負責的就是頁面的渲染流程，這邊還是簡單說明下，在瀏覽器輸入 URL 並按下 Enter 後，搜尋列會先對輸入做解析，判斷使用者輸入的是 URL 還是搜尋關鍵字，並透過 Network Thread 或是 Network Process 去做資源請求，並根據回傳的 Content-Type 來決定下一步要交給誰做，如果是回傳的是 HTML，就會準備交由 Renderer Process 進行渲染流程。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*57F8N58JxoDtgnaGn0neKA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;讀者可以透過 CURL 來看看 Response Header 中的 content-type&lt;br /&gt;
基本上如果你上網查詢瀏覽器渲染流程，應該都會看到跟下面這張差不多的圖片：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*ex4bOPRpLwwNMmLm0v18Yg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果有看過我之前關於前端效能優化方式統整的文章「今晚，我想來點 Web 前端效能優化大補帖」的讀者應該會對以上流程有點印象，大致上網頁的渲染流程為：&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;讀取 HTML 後生成 DOM Tree&lt;/li&gt;
  &lt;li&gt;讀取 HTML 中的 CSS Link Tag 生成 CSSOM Tree&lt;/li&gt;
  &lt;li&gt;DOM Tree 與 CSSOM Tree 共同生成 Render Tree&lt;/li&gt;
  &lt;li&gt;根據 Render Tree 生成 Layout Tree，負責各元素大小與位置的計算&lt;/li&gt;
  &lt;li&gt;最後 Paint 畫面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;但是，其實瀏覽器在 Layout 之前與 Paint 之後的過程還做了一些事。&lt;br /&gt;
而這些事是一般在網路查詢渲染流程時不太會被介紹到的，往往被開發者所忽略的部分，雖然主要是因為瀏覽器幫我們做好了，不知道這些事也不會影響到開發者的開發流程，不過如果對整個渲染流程有更完整的理解，一定是利大於弊的。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;layer-分層&quot;&gt;Layer 分層&lt;/h3&gt;
&lt;p&gt;為了方便實現一些瀏覽器上的複雜效果例如頁面滾動或是三維空間的排序，瀏覽器會根據 Layout Tree 產生 Layer Tree&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*cwAlMho6lZ6Mycj-iFap8A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果使用過 Adobe Photoshop 的讀者應該都知道，我們最後產出的圖，實際上就是由許多圖層疊加在一起的，而瀏覽器上的頁面其實也是ㄧ樣的，這邊讀者還不需要去理解瀏覽器是怎麼安排哪些節點應該要變成一個獨立的圖層的，這是一個非常複雜的技術，各位讀者目前只需要知道「瀏覽器上的頁面也是由許多圖層疊加在一起的」就足夠了，如果真的有興趣了解背後機制的讀者可以再自行研究。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*0M-n6IF38nNvztBa97yOEw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在將頁面分層以後，就要對每個圖層進行繪製了，不過我想大部分的人都會以為真正的繪製行為就是在 Renderer Process 中的 Main Thread 執行的，不過其實這個階段做的只是「產生繪製指令」而已，所謂的繪製指令就是告訴瀏覽器在哪個座標要繪製線或是繪製幾何圖形等簡單指令的集合，後續的操操作則是會在生成繪製指令後轉交給 Renderer Process 中的另一個執行緒 — Compositor Thread 來接棒。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;compositing&quot;&gt;Compositing&lt;/h2&gt;
&lt;p&gt;現在瀏覽器已經獲得了渲染頁面所需要的資訊了，例如 DOM Tree 的結構、每個節點的 Style、節點在頁面中的幾何位置，還有剛剛提到的各個圖層的繪製指令與疊加順序…等，因此已經準備好可以繪製到頁面上了。&lt;br /&gt;
首先讀者得先了解一個專有名詞 — rasterize 柵格化，也就是把上述頁面資訊轉變成 pixels 顯示在螢幕上。如果不考慮分層的話，最符合常理的狀況就是一次 rasterize 出現在 viewport 裡的部分，如果使用者滑動了頁面，再去 rasterize 新出現在 viewport 的部分。在舊的 Chrome 架構中的確是採用這種方式，不過隨著瀏覽器進步，現在採用的是更複雜，但是整體效能更好的流程，也就是標題的 compositing，中文可以稱作合成。&lt;br /&gt;
先前已經提到瀏覽器根據 Layout Tree 生成了 Layer Tree，compositing 的概念就是各個 Layer 分別做 rasterize，並在 Compositor Thread 把各個經過柵格化的圖層組合起來，此時如果有頁面滾動事件產生，因為每個 Layer 已經經過柵格化，所以要做的事就是合成一個新的 frame 就好。&lt;br /&gt;
不過每個 Layer 的大小不ㄧ樣，有些 layer 可能幾乎包含整個頁面的大小，會導致效能受到影響，因此 Compositor Thread 會再將一個 Layer 切分成更小的單位 — tile(柵格化的最小單位)，並把這些 tiles 送到真正負責柵格化的 raster threads，raster threads 將 tiles rasterize 後會存放到瀏覽器的 GPU 儲存空間裡。Tiles 被柵格化之後，&lt;br /&gt;Compositor Thread 會匯集被稱作 draw quads 的資訊來產生 Compositor Frame。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*6dleKIcII0jVrm80RouMMg.png&quot; alt=&quot;&quot; /&gt;
Compositor Frame 接著會藉由 IPC 被送到 Browser Process，最後送到 GPU 去顯示到畫面上。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*vpRqOs1dCtxluNu8aCv_Nw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所以看到這我們應該可以把原本的渲染流程圖修改成下面這樣：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*ZwAgbaV5mi3DmVRhiefY7A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reflow--repaint--compositing&quot;&gt;Reflow &amp;amp; Repaint &amp;amp; Compositing&lt;/h2&gt;

&lt;p&gt;最後來談談頁面更新造成的 Reflow 回流、Repaint 重繪與 Compositing 合成，這是三個與頁面效能高度相關的概念。&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;reflow-回流&quot;&gt;Reflow 回流&lt;/h3&gt;
&lt;p&gt;指的是瀏覽器為了重新渲染部分或全部的 document 而重新計算 Render Tree 中元素的物理屬性，如位置、大小的過程。&lt;br /&gt;
觸發條件為改變一些元素的幾何樣式，例如 height、width、margin 或是排列的方式等等。&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;repaint-重繪&quot;&gt;Repaint 重繪&lt;/h3&gt;
&lt;p&gt;將計算結果轉為實際的像素，畫到畫面上。&lt;br /&gt;
如果只改動元素的顏色、背景圖等不需要重新計算頁面元素 layout 的樣式，就只會從 Repaint 開始觸發，跳過 Reflow 的步驟，最後再到合成階段。&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;composition-合成&quot;&gt;Composition 合成&lt;/h3&gt;
&lt;p&gt;也就是剛剛提到的合成。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*AFOOcrE0IOgkdRAOjiow8g.png&quot; alt=&quot;&quot; /&gt;
頁面更新簡易流程&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;這邊需要了解的是，如果觸發了渲染流程的某個階段，那麼其之後的階段就也會被觸發。透過文章前面的渲染流程內容，我們大致可以推斷出，Reflow 跟 Repaint 分別會觸發渲染流程中的哪些步驟&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(圖片的部分因為是自己畫的，很醜我先道歉QQ)&lt;br /&gt;
了解這些以後，應該可以發現，不同的改變樣式的方式，是會觸發不同渲染流程的，因此也是效能優化的一個方向：&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-改變一些-layout-相關屬性&quot;&gt;1. 改變一些 Layout 相關屬性&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*WvuD9L5xYQo84gLFBAW0WQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如 width、height、position 的 left 或 top 等，瀏覽器會需要重新計算頁面元素的 layout，因此渲染流程沒有步驟可以被省略，Reflow、Repaint、Compositing 都會被觸發。&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;2-只改變一些paint-only的屬性&quot;&gt;2. 只改變一些「paint only」的屬性&lt;br /&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*MV1SQJw7WqhXT6fta590zw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如背景圖片、字體顏色等不需要重新計算 layout 的屬性，Reflow 就不會被觸發，Layout 會被跳過，只會觸發 Repaint 之後的流程。&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-compositing-only&quot;&gt;3. Compositing Only&lt;/h3&gt;
&lt;p&gt;也就是更改一些不需要 Reflow 與不需要 Repaint 的屬性，例如 CSS 的&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;transform: translate(xxx, yyy);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;這種改變方式是效率最好的，除了因為它不需要經過 Reflow 與 Repaint ，只需要做合成以外，還有一個重點是「合成的運作不是在 Main Thread 進行的，而是在 Compositor Thread 與 Raster Thread，因此不會佔用 Main Thread 資源」，這也是為什麼要做 CSS 動畫會建議使用 transform 的原因。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*EDEOzsebT3qXabY6i4KKTw.png&quot; alt=&quot;&quot; /&gt;
很醜，再次道歉QQ&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;如何避免多餘的 Reflow 與 Repaint？&lt;br /&gt;
避免用多個 statement 修改 style，建議使用新增或移除 class 的方式。&lt;br /&gt;
先一次讀取完，再一起修改&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/700/1*-qq29BNULK1pljvETfXv7Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;從上圖範例可以看到 read 一次就馬上 write 一次的寫法會造成 6 次 Reflow，然而&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/700/1*9lIC33O9tb5ha6Gq9ukPIQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;這種一次 read 完全部再 write 全部的寫法卻只會造成 1 次 Reflow，在複雜的應用中也許兩種方式會造成頁面效能產生很大的差異，而背後原因則跟瀏覽器更深入的運作機制有關，這邊就不多加探討。&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;其實優化 Reflow 與 Repaint 的方式還有許多，有興趣的讀者可以參考這裡，也可以在這裡看到各種 CSS 屬性改變會觸發的渲染階段。&lt;br /&gt;
Reflow、Repaint 與Compositing 的簡單介紹就到這裡。其實上面說的這些也只是基礎中的基礎，可見寫 CSS 也是水很深的一門學問啊，如果想知道怎麼好好掌握 Reflow、Repaint、Compositing，來避免寫出消耗渲染性能的程式碼，建議讀者參考這篇文章。&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;結語&quot;&gt;結語&lt;/h2&gt;
&lt;p&gt;李開復曾說過：「瀏覽器就是未來的作業系統。」這句話曾引起了廣泛的討論，持正反意見的人都有，雖然現在看下來，要取代作業系統有一定的難度，不過可以肯定的是，瀏覽器只會越變越強，能在瀏覽器上做的事只會越來越多，並且執行效能只會愈來越好。身為一個需要與瀏覽器共舞 Web 開發者，除了要知道瀏覽器越變越厲害以外，也該知道它進步的原因，背後的架構是怎麼演進的，還有它在短時間的未來可能會成長成什麼樣子，才能好好的擁抱這波技術大躍進，發展更多的可能性。希望這篇文章可以使讀者對於瀏覽器有更深的理解，也激發出對它的興趣。&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;Inside look at modern web browser (Part 1, 2, 3, 4)&lt;br /&gt;
浏览器工作原理与实践&lt;br /&gt;
Chrome Site Isolation&lt;br /&gt;
Rendering Performance&lt;br /&gt;
Reflow 和 Repaint 引發的性能問題&lt;br /&gt;
DOM Performance&lt;br /&gt;&lt;/p&gt;</content><author><name>Darren Tu</name><email>darrentu8@gmail.com</email></author><category term="blog" /><summary type="html">「在未來，瀏覽器會變得越來越強，以後我們可以在瀏覽器做越來越多事。」</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://img.technews.tw/wp-content/uploads/2017/12/29164436/browsers-1265309_1280.png" /><media:content medium="image" url="https://img.technews.tw/wp-content/uploads/2017/12/29164436/browsers-1265309_1280.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">利用Google Sheet 當你的簡易表單資料庫！</title><link href="https://darrentu8.github.io//blog/blog/2018-08-05-blog-google-sheet/" rel="alternate" type="text/html" title="利用Google Sheet 當你的簡易表單資料庫！" /><published>2018-08-05T00:00:00+08:00</published><updated>2021-07-09T22:59:41+08:00</updated><id>https://darrentu8.github.io//blog/blog/blog-google-sheet</id><content type="html" xml:base="https://darrentu8.github.io//blog/blog/2018-08-05-blog-google-sheet/">&lt;p&gt;這篇文章想來分享一個自己覺得非常有趣且實用的應用，就是利用 google sheet 來充當表單內容的資料庫，我想許多讀者會猜測這將會是一個麻煩的過程，可能要經過許多繁雜的設置，不過事實是…
其實非常簡單又方便
如果想一探究竟的讀者就繼續往下看吧！&lt;/p&gt;
&lt;h2 id=&quot;做什麼---simple-demo&quot;&gt;做什麼 - Simple Demo&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/566/1*Ym4gwVh3U2NICIVrHoDmuw.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;客製化表單上傳至-google-sheet&quot;&gt;客製化表單上傳至 google sheet&lt;/h2&gt;
&lt;p&gt;Why ?&lt;br /&gt;
基本上大部分的事情都是先有需求，再去因應需求找出對應的解法，因此今天在說明該怎麼做到把 google sheet 當作客製化表單資料庫以前，我們得先談談這樣的方法適合應用在哪些 use cases 上。&lt;br /&gt;
大部分企業幾乎都會有自己的形象官網，而通常官網也會與企業提供的服務分開，為單純以展示資訊為主要目的的靜態形象頁面。同樣性質的網頁還有特定活動的 campaign site，也是以展示活動資訊為主要目的，與網頁應用程式（web app）有很大的區別。不過雖然是以呈現資訊為主，這類型的網站通常會有一個例如「聯絡我們」的區塊，讓使用者填寫自己的聯絡資訊，搜集顧客資訊以挖掘更多潛在的商機，例如我最愛的國產車品牌 Luxgen 的官網：&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*fj-xYxjHQZ-d9VsW6b4BHQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;luxgen-官網&quot;&gt;Luxgen 官網&lt;/h2&gt;
&lt;p&gt;我們都知道通常 Form 的運作是在 submit 時會發一個 POST 請求到後端 API，再將資料儲存到後端資料庫裡。但是如果因為團隊人力配置因素或是開發者本身技術限制，沒辦法生出這樣一個 API 的話該怎麼辦呢？又或者即使有這樣的 API，但要運用這些資料的人反而是非工程 team 的夥伴時，請他們下 SQL query 去撈資料好像又不是那麼實際或方便（當然還是有很多能協助達成這件事的工具啦），這時候如果採用文章標題的方法似乎蠻可行的：將客製化的表單內容上傳至 google sheet 中。像這樣資料提交數量不會很大的 case，就很適合這樣的做法，google sheet 的操作介面也十分平易近人，適合所有人來使用。&lt;br /&gt;
了解這個方法適用的 case 後，Let’s do it !&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;setp-1-建立一個-google-表單&quot;&gt;SETP 1. 建立一個 Google 表單&lt;/h2&gt;
&lt;p&gt;是的，你沒有看錯，不是 google 試算表，是 google 表單(Google Form)。在我們從客製化表單點擊 submit 後，我們會對一個 URL 發一個 POST request ，這個 URL 就是 google 表單的連結，URL 中我們會帶 query string，我們都知道 query string 會是 key-value pair 的形式，這邊的 key 會是 google 表單各欄位的 id，value 則是我們從客製化表單收集到的資訊，當我們完成這個請求後，就會自動將資料回覆到 google 表單中，接著就是 google 服務強大的地方了，它可以將 google 表單收到的回覆同步到一個 google sheet 中，如此一來 google sheet 就成為一個簡單的儲存庫了。&lt;br /&gt;
讓我們總結一下這個方式&lt;br /&gt;
從客製化表單按下送出按鈕後，會對 Google 表單發一個 POST 請求，以 query string 的方式將資料帶到 google 表單回覆中，再利用 google 服務相通的功能，將資料同步儲存到 Google sheet 中。&lt;br /&gt;
不過其實除了一開始設定以外，之後的流程都可以忽略 Google 表單那層，我們可以看成從客製化表單送出後，資料就直接存到 google sheet 裡面了。&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/700/1*Chuy3yR_UiRYdD3Pvdm5uw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（在開始之前記得將表單權限設為所有人都可以存取喔！）
在建立 google 表單之後，就可以來建立問題欄位，注意囉，這邊的欄位要跟你網頁上客製化表單的欄位ㄧ樣喔！這邊因為 demo 方便所以隨便新增兩個欄位。&lt;br /&gt;
接著點選回覆的 tab，有個 google sheet 的 icon，點擊創建一個與這個表單連結的試算表（其實也可以連結現有表單不需重新建立）&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/700/1*Chuy3yR_UiRYdD3Pvdm5uw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;google-form-連結-google-sheet&quot;&gt;google form 連結 google sheet&lt;/h2&gt;
&lt;p&gt;接下來我們需要取得兩個東西：&lt;br /&gt;
google 表單的 ID&lt;br /&gt;
表單中各欄位的 ID&lt;br /&gt;
google 表單的 ID&lt;br /&gt;
&lt;img src=&quot;https://miro.medium.com/max/600/1*NmymnoIwFhup-GxUFk0Z_A.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;先點選右上角的「傳送」按鈕，再點選連結的傳送方式，會出現一段 URL，以 demo 裡的例子來說，URL 為&lt;br /&gt;
&lt;a&gt;https://docs.google.com/forms/d/e/1FAIpQLSfniOOcWIeG4FsL14tqLoEfqz9oRYuGru8rwMvOhH2vs7UPPg/viewform?usp=sf_link&lt;/a&gt;
我們要的 form ID 即為 /e 後的那段字串，即是&lt;br /&gt;
1FAIpQLSfniOOcWIeG4FsL14tqLoEfqz9oRYuGru8rwMvOhH2vs7UPPg &lt;br /&gt;
表單中各欄位的 ID&lt;br /&gt;
我們得取得 google 表單中各欄位的 ID，才能在 POST request 時正確傳資料到該欄位，首先先進入上面拿到的用來分享表單的連結&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a&gt;https://docs.google.com/forms/d/e/1FAIpQLSfniOOcWIeG4FsL14tqLoEfqz9oRYuGru8rwMvOhH2vs7UPPg/viewform?usp=sf_link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;進入後開啟-browser-的-devtool&quot;&gt;進入後開啟 browser 的 devtool&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*34F3KB_mQ9p4FTLuITkIZA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;在-form-element-內層可以找到幾個-hidden-的-input&quot;&gt;在 form element 內層可以找到幾個 hidden 的 input&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/700/1*6tSElKgajvjCqNg3nA_4Rw.png&quot; alt=&quot;&quot; /&gt;
entry.979040326 與 entry.589442071 就是我們要找的欄位 ID，注意這邊 hidden input 的順序是跟表單欄位的順序一樣的喔！&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;post-request&quot;&gt;POST Request&lt;/h2&gt;
&lt;p&gt;必要的資料都拿到後就可以試著在客製化表單送出時發出 POST request 了&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { stringify } from 'qs';
export const uploadToGoogleSheet = (formId: string, query: Record&amp;lt;string, unknown&amp;gt;): Promise&amp;lt;void&amp;gt; =&amp;gt; {
  return new Promise((resolve, reject) =&amp;gt; {
    fetch(`https://docs.google.com/forms/d/e/${formId}/formResponse?&amp;amp;${stringify(query)}&amp;amp;submit=SUBMIT`, {
      method: 'POST',
      mode: 'no-cors', // Google will only submit a form if 'mode' is 'no-cors'
      redirect: 'follow', 
      referrer: 'no-referrer',
    })
      .then(() =&amp;gt; resolve())
      .catch(() =&amp;gt; reject());
  }); 
};

// call this function when submit the form
const handleSubmit = values =&amp;gt; {
  const FORM_ID = '1FAIpQLSfniOOcWIeG4FsL14tqLoEfqz9oRYuGru8rwMvOhH2vs7UPPg';
  const query = {
    'entry.979040326': values.data1, // 傳送使用者在表單填寫的資訊
    'entry.589442071': values.data2,
  };
  uploadToGoogleSheet(FORM_ID, query)
    .then(() =&amp;gt; {
      // do something when submit success
    })
    .catch(() =&amp;gt; {
      // do something when submit fail
    });
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;程式碼其實相當簡單，我們只需要將剛剛拿到的 form ID 帶進 URL 中，再將各欄位的 entry ID 帶入 query string 中當作 key，value 則給予使用者在客製化表單上輸入的值，POST request 成功後回到 google sheet 就會看到剛剛 submit 的值已經被記錄下來囉！&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小結&quot;&gt;小結&lt;/h2&gt;
&lt;p&gt;雖然說這是一個沒什麼技術含量的分享，但我認為這樣的方式十分有趣，以某些 use cases 來說也是非常適合的一種記錄表單資料的方式，google 表單雖然方便，但有時候總會因為缺乏「美感」或是獨立於我們網頁之外而使人卻步，如果你有類似的問題，不妨試試看本篇文章教的方法吧，希望這篇文章能夠幫助到螢幕前的你！&lt;/p&gt;</content><author><name>Darren Tu</name><email>darrentu8@gmail.com</email></author><category term="blog" /><summary type="html">這篇文章想來分享一個自己覺得非常有趣且實用的應用，就是利用 google sheet 來充當表單內容的資料庫，我想許多讀者會猜測這將會是一個麻煩的過程，可能要經過許多繁雜的設置，不過事實是… 其實非常簡單又方便 如果想一探究竟的讀者就繼續往下看吧！ 做什麼 - Simple Demo</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://img.ltn.com.tw/Upload/3c/page/2016/08/03/160803-25553-1.png" /><media:content medium="image" url="https://img.ltn.com.tw/Upload/3c/page/2016/08/03/160803-25553-1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Frontend ? Backend ? 如何選擇？</title><link href="https://darrentu8.github.io//blog/blog/2018-06-01-blog-F2E/" rel="alternate" type="text/html" title="Frontend ? Backend ? 如何選擇？" /><published>2018-06-01T00:00:00+08:00</published><updated>2021-07-09T22:59:41+08:00</updated><id>https://darrentu8.github.io//blog/blog/blog-F2E</id><content type="html" xml:base="https://darrentu8.github.io//blog/blog/2018-06-01-blog-F2E/">&lt;blockquote&gt;
  &lt;p&gt;最近剛好面臨換工作，要思考未來發展的方向，目前還是以 web 開發為目標，而提及 web 開發，不外乎就是前端與後端之間做選擇。一開始進入程式開發的世界是從前端入手，除了入門容易以外，能夠透過畫面看到成果也加強學習的慾望跟成就感。大約在學習前端一年後開始接觸後端，原因是為了更了解網頁的運作流程，讓自己的作品更完整。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;一開始的志向-全端工程師&quot;&gt;一開始的志向： 全端工程師&lt;/h2&gt;
&lt;p&gt;在前後端開發都有興趣的狀況下，一開始的目標理所當然設為 FullStack Developer，直到看到巴哈姆特一篇很火的文章當中的一句話：&lt;br /&gt;
通常自稱 FullStack Developer 的人都很廢&lt;br /&gt;
我開始去對 web 生態系做了更深入的了解，除了讓我領悟到在初期我應該專注在一端發展外，也讓我進入一個自我困惑期。&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;自我困惑時期&quot;&gt;自我困惑時期&lt;/h2&gt;
&lt;p&gt;不查還好，一查才發現原來網路上有很多看不起前端開發者的言論，原因不出以下幾項：&lt;br /&gt;
入門容易，門檻較低
比起後端較不需要本科知識
大量轉職人潮，供需法則，而有了前端難民的說法
這讓我對自己的未來走向產生疑惑，繼續前端的路我真的可以創造價值嗎？
釐清 “自己” 的價值
經過長時間的思考，我對於以上的困惑都有了大致上的解答&lt;/p&gt;
&lt;h2 id=&quot;frontend-很簡單嗎&quot;&gt;Frontend 很簡單嗎？&lt;/h2&gt;
&lt;p&gt;我想有深入了解前端領域的人都知道這個答案是否定的，近期的前端技術可說是經過了大進化，PWA、React-Native、WebAssembly 等技術漸漸成熟，瀏覽器的發展也加深前端的發展性，效能優化也變成重要的工作， website 漸漸式微，由 webapp 取而代之。
很幸運的我在實習遇到很好的主管，很堅強的前端團隊，讓我知道品質好的程式碼是怎麼一回事，好的專案架構又是怎麼一回事，而這些絕對都是不簡單的事。與主管聊過後也更確定 ”價值是自己創造的“ 這個道理。我想就 frontend developer 而言，有的人更偏向工程這塊，有的人更偏向使用者體驗、UI 畫面，並不會因為他的職稱是工程師，就讓偏向使用者體驗與UI 畫面的人顯得沒有價值，這方面得依照 “需求” 去做決定，而我們則是可以掌握自己要走進哪種需求中的人。&lt;/p&gt;
&lt;h2 id=&quot;fullstack-的疑慮&quot;&gt;FullStack 的疑慮&lt;/h2&gt;
&lt;p&gt;我得承認，在有限的時間裡，要同時專精前端與後端是非常困難的，因此我最終也同意得先專精於某一端，對哪端比較有掌握度或比較有興趣就好好往那端發展，然而這並不代表我不能同時學另外的技術啊！我想如果有人問我是在寫什麼的，我會回答，我是一個 web developer 或是我是一個 software engineer，平常專注於前端技術，但也對後端技術有所涉獵。身為一個前端，你會想知道怎麼自己寫資料層，而身為一個後端，你也會好奇自己產生的資料能夠在前端呈現出怎麼樣的效果，我想這是理所當然的事。
也許未來我會掛著 frontend 的 title 在軟體界闖蕩，又或許在幾年後 title 變成了 backend，但我想這些都不是最重要的事，重要的是我不能忘記我想透過軟體解決問題的初衷，也不能忘記自己想成為分享者的夢想，其中最重要的是我不能忘記我是因為熱愛這個領域才在其中闖蕩，我想總有一天我會創造自己的價值的。&lt;/p&gt;</content><author><name>Darren Tu</name><email>darrentu8@gmail.com</email></author><category term="blog" /><summary type="html">最近剛好面臨換工作，要思考未來發展的方向，目前還是以 web 開發為目標，而提及 web 開發，不外乎就是前端與後端之間做選擇。一開始進入程式開發的世界是從前端入手，除了入門容易以外，能夠透過畫面看到成果也加強學習的慾望跟成就感。大約在學習前端一年後開始接觸後端，原因是為了更了解網頁的運作流程，讓自己的作品更完整。</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://magiccopy.xyz/assets/images/hadder.gif" /><media:content medium="image" url="https://magiccopy.xyz/assets/images/hadder.gif" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>